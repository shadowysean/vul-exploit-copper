import json
import argparse
from codecs import open


def _nested_lookup_ret(key, document):
    """Don't touch this part"""
    if isinstance(document, list):
        for d in document:
            for result in _nested_lookup_ret(key, d):
                yield result

    if isinstance(document, dict):
        for k, v in document.iteritems():
            if key == k or (key in k):
                yield v
            elif isinstance(v, dict):
                for result in _nested_lookup_ret(key, v):
                    yield result
            elif isinstance(v, list):
                for d in v:
                    for result in _nested_lookup_ret(key, d):
                        yield result


def _nested_lookup_only(key, document):
    """Don't touch this part"""
    if isinstance(document, list):
        for d in document:
            _nested_lookup_only(key, d)

    if isinstance(document, dict):
        for k, v in document.iteritems():
            if key == k or (key in k):
                return True
            elif isinstance(v, dict):
                _nested_lookup_only(key, v)
            elif isinstance(v, list):
                for d in v:
                    _nested_lookup_only(key, d)
    return False


parser = argparse.ArgumentParser()
parser.add_argument("optype", help="type of operation to apply")
parser.add_argument("dbsource", help="which database source to play with")
parser.add_argument("--input", help="choose the input file (json format please)")
parser.add_argument("--output", help="choose the path to dump results")
args = parser.parse_args()

data, cve_lst = [], []
with open(args.input) as f:
    for line in f:
        data.append(json.loads(line))

if args.optype == 'extract':
    if args.dbsource == 'via4':
        for entry in data:
            concat_desc = ' '.join(_nested_lookup_ret('description', entry))
            if not concat_desc:
                continue
            if _nested_lookup_only('exploit-db', entry):
                curr_line = '__label__true ' + concat_desc
            else:
                curr_line = '__label__false ' + concat_desc
            cve_lst.append(curr_line.encode('unicode_escape') + '\n')

    elif args.dbsource == 'cves':
        pass

with open(args.output, 'w') as f:
    f.writelines(cve_lst)
